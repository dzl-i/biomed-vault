// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Researcher {
    id                     String              @id @default(uuid())
    name                   String
    institution            String
    email                  String              @unique
    username               String              @unique
    password               String
    accessToken            String?
    refreshToken           String?
    remainingLoginAttempts Int                 @default(3)
    patients               Patient[]
    dataAccessLogs         DataAccessLog[]
    researcherProjects     ResearcherProject[]
}

model Patient {
    id             String            @id @default(uuid())
    name           String
    dateOfBirth    DateTime
    sex            Sex
    diagnosticInfo String?
    researcherId   String
    researcher     Researcher        @relation(fields: [researcherId], references: [id])
    genomicData    GenomicData[]
    phenotypes     Phenotype[]
    imagingData    ImagingData[]
    signalData     SignalData[]
    categories     CategoryPatient[]
}

model GenomicData {
    id            String          @id @default(uuid())
    patientId     String
    patient       Patient         @relation(fields: [patientId], references: [id])
    dataType      GenomicDataType
    geneNames     String[]
    mutationTypes String[]
    impacts       String[]
    rawDataUrl    String // URL to the stored raw genomic data file
    quality       DataQuality     @default(UNKNOWN)
}

model Phenotype {
    id          Int      @id @default(autoincrement())
    patientId   String
    patient     Patient  @relation(fields: [patientId], references: [id])
    description String
    traits      String[]
    source      String? // Source of the phenotype data (e.g., clinician, self-reported)
}

model ImagingData {
    id        String      @id @default(uuid())
    patientId String
    patient   Patient     @relation(fields: [patientId], references: [id])
    imageType ImagingType
    image     String? // Store the actual image
    imageUrl  String? // URL to the stored image file
}

model SignalData {
    id         String     @id @default(uuid())
    patientId  String
    patient    Patient    @relation(fields: [patientId], references: [id])
    signalType SignalType
    dataPoints Json // Store data points as JSON
    duration   Float? // Duration of the signal in seconds
    sampleRate Float? // Sample rate in Hz
}

model Category {
    id       String            @id @default(uuid())
    name     String            @unique
    type     CategoryType
    patients CategoryPatient[]
}

model CategoryPatient {
    categoryId String
    patientId  String
    category   Category @relation(fields: [categoryId], references: [id])
    patient    Patient  @relation(fields: [patientId], references: [id])

    @@id([categoryId, patientId])
}

model DataAccessLog {
    id           String     @id @default(uuid())
    researcherId String
    researcher   Researcher @relation(fields: [researcherId], references: [id])
    action       String
    details      String
    timestamp    DateTime   @default(now())
}

model Project {
    id                 String              @id @default(uuid())
    name               String
    description        String
    status             ProjectStatus       @default(ACTIVE)
    researcherProjects ResearcherProject[]
}

model ResearcherProject {
    researcherId String
    projectId    String
    researcher   Researcher  @relation(fields: [researcherId], references: [id])
    project      Project     @relation(fields: [projectId], references: [id])
    role         ProjectRole

    @@id([researcherId, projectId])
}

enum Sex {
    MALE
    FEMALE
    OTHER
}

enum GenomicDataType {
    WGS
    WES
    RNA
    TARGETTED
}

enum ImagingType {
    MRI
    CT
    XRAY
    ULTRASOUND
    PETSCAN
}

enum SignalType {
    ECG
    EEG
    EMG
    EOG
}

enum CategoryType {
    DISEASE
    PHENOTYPE
    MUTATION
    TREATMENT
    DRUG
}

enum ProjectRole {
    LEAD
    MEMBER
}

enum DataQuality {
    UNKNOWN
    LOW
    MEDIUM
    HIGH
}

enum ProjectStatus {
    ACTIVE
    COMPLETED
    SUSPENDED
    ARCHIVED
}
